import telebot
from telebot import types
bot = telebot.TeleBot('BOT')

@bot.message_handler(commands=['start', 'help'],content_types=['text'])


def get_text_messages(message):
    bot.send_message(message.from_user.id, 'Привет! Я glosses_bot, и моя основная функция - глоссирование слов. Я пока умею не так много, но обязательно научусь делать больше в ближайшее время!\n\nЧтобы начать работу, напиши мне /start')
    if message.text == '/start':
        bot.send_message(message.from_user.id, 'Напиши слово, которое мне нужно проглоссировать')
        bot.register_next_step_handler(message, get_word)
    elif message.text == '/help':
        bot.send_message(message.from_user.id, 'Чтобы начать глоссирование, напиши /start')
    else:
        bot.send_message(message.from_user.id, 'Напиши слово, которое мне нужно проглоссировать')

def get_word(message): #получаем слово и проверяем, является ли полученное словом
    global word
    if ' ' in message.text: #проверяем, что слово написано без пробелов ("ко ты" не является словом, "коты" - является)
            bot.send_message(message.from_user.id, 'Напиши, пожалуйста, одно слово без пробелов')
    else:
            break_count = 0 #проверяем, что слово написано кириллицей
            for symbol in message.text:
                if symbol.lower() in 'абвгдеёжзийклмнопрстуфхцчшщэюяъьы-':
                    break_count +=1 
            if break_count == len(message.text): #получаем слово в начальной форме
                word = message.text
                bot.send_message(message.from_user.id, 'Напиши это слово в начальной форме.')
                bot.register_next_step_handler(message, get_pos)
            else:
                bot.send_message(message.from_user.id, 'Слово должной быть написано кириллицей, без использования специальных символов или других систем графики!')
                bot.register_next_step_handler(message, get_word)

grammar_info = ''
def get_pos(message): #получаем часть речи слова
    global word_initial
    word_initial = message.text
    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    key_noun = types.KeyboardButton('Существительное')
    key_verb = types.KeyboardButton('Глагол')
    key_adj = types.KeyboardButton('Прилагательное')
    key_pronoun = types.KeyboardButton('Местоимение')
    key_adverb = types.KeyboardButton('Наречие')
    key_part = types.KeyboardButton('Частица')
    key_conj = types.KeyboardButton('Союз')
    key_prep = types.KeyboardButton('Предлог')
    key_participle1 = types.KeyboardButton('Причастие')
    key_participle2 = types.KeyboardButton('Деепричастие')
    keyboard.row(key_noun,key_verb,key_adj,key_pronoun,key_adverb,key_part,key_conj, key_prep, key_participle1, key_participle2)
    bot.send_message(message.from_user.id,'Какая часть речи у этого слова?',reply_markup=keyboard)
    bot.register_next_step_handler(message, get_pos_2)

    #перенаправляемся с части речи на грамматические характеристики для каждой части речи
def get_pos_2(message):
    global pos
    global grammar_info
    pos = message.text

    grammar_info += pos                            
    if pos == 'Существительное': 
        #узнаем разряд имени существительного - переменная noun_type
        keyboard_noun_type = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        key_proper = types.KeyboardButton('Cобственное')
        key_appellative = types.KeyboardButton('Нарицательное')
        keyboard_noun_type.row (key_proper, key_appellative)
        bot.send_message(message.from_user.id,'Разряд имени существительного',reply_markup=keyboard_noun_type)
        bot.register_next_step_handler(message, get_case)
        
    elif pos == 'Глагол':  
        #узнаем наклонение глагола - переменная modul          
        keyboard_modul = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        key_ind = types.KeyboardButton('Изъявительное')
        key_imp = types.KeyboardButton('Повелительное')
        key_conj = types.KeyboardButton('Условное')
        keyboard_modul.row(key_ind, key_imp, key_conj)
        bot.send_message(message.from_user.id, 'Наклонение', reply_markup = keyboard_modul)
        bot.register_next_step_handler(message, get_tense)
        
    elif pos == 'Прилагательное' or pos == 'Наречие':
        keyboard_comparison = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        key_pos = types.KeyboardButton('Положительная')
        key_comp = types.KeyboardButton('Сравнительная')
        key_super = types.KeyboardButton('Превосходная')
        keyboard_comparison.row(key_pos, key_comp, key_super)
        bot.send_message(message.from_user.id, 'Степень сравнения', reply_markup = keyboard_comparison)
        if pos == 'Прилагательное':
            bot.register_next_step_handler(message, get_form)
        elif pos == 'Наречие':
            bot.register_next_step_handler(message, ready)
    
    elif pos == 'Причастие':
        keyboard_form = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        key_full = types.KeyboardButton('Полная')
        key_short = types.KeyboardButton('Краткая')
        keyboard_form.row(key_full, key_short)
        bot.send_message(message.from_user.id, 'Форма', reply_markup = keyboard_form)
        bot.register_next_step_handler(message, get_voice)
            
    elif pos == 'Местоимение': #узнаем разряд местоимения - переменная pronoun_type
        keyboard_type = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        key_personal = types.KeyboardButton('Личный')
        key_possesive = types.KeyboardButton('Притяжательный')
        key_reflexive = types.KeyboardButton('Возвратный')
        key_relative = types.KeyboardButton('Относительный/вопросительный')
        key_demonstrative = types.KeyboardButton('Указательный')
        key_definitive = types.KeyboardButton('Определительный')
        key_indefinitive = types.KeyboardButton('Неопределенный')
        key_negative = types.KeyboardButton('Отрицательный')
        keyboard_type.row(key_personal, key_possesive, key_reflexive, key_relative, key_demonstrative, key_definitive, key_indefinitive, key_negative)
        bot.send_message(message.from_user.id, 'Разряд местоимения', reply_markup = keyboard_type)
        if word_initial.lower() in ['каков','таков']: #у слов есть только категории числа и рода
            bot.register_next_step_handler(message, get_number)
        else:
            bot.register_next_step_handler(message, get_case)
    
    elif pos == 'Предлог' or pos == 'Союз' or pos == 'Частица':
        bot.register_next_step_handler(message, ready) #????
      
    elif pos == 'Деепричастие': #ничего не узнаем, отправляем сразу в функцию времени
        bot.register_next_step_handler(message, get_tense)

def get_form(message):
    global comparison
    global grammar_info
    
    comparison = message.text
    grammar_info += '\n' + comparison
    
    if comparison == 'Сравнительная' or comparison == 'Превосходная':
        bot.register_next_step_handler(message, ready)
    else:
        keyboard_form = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        key_full = types.KeyboardButton('Полная')
        key_short = types.KeyboardButton('Краткая')
        keyboard_form.row(key_full, key_short)
        bot.send_message(message.from_user.id, 'Форма', reply_markup = keyboard_form)
        bot.register_next_step_handler(message, get_case)
        

def get_voice(message):
    global form 
    global grammar_info
    form = message.text
    grammar_info += '\n' + form
    
    keyboard_voice = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    key_act = types.KeyboardButton('Активный')
    key_pass = types.KeyboardButton('Пассивный')
    keyboard_tense.row(key_act, key_pass)
    bot.send_message(message.from_user.id, 'Залог', reply_markup = keyboard_voice)
    bot.register_next_step_handler(message, get_tense)
                              
def get_case(message):
    global grammar_info
    global noun_type
    global form
    global tense 
    global pronoun_type
    
    if pos == 'Существительное':
        noun_type = message.text
        grammar_info += '\n' + noun_type
    elif pos == 'Прилагательное':
        form = message.text 
        grammar_info += '\n' + form
        if form == 'Краткая':
            bot.register_next_step_handler(message, get_number)
    elif pos == 'Местоимение':
        pronoun_type = message.text
        grammar_info += '\n' + pronoun_type
    elif pos == 'Причастие':
        tense = message.text
        grammar_info += '\n' + tense
        if form == 'Краткая':
            bot.register_next_step_handler(message, get_number)
        
    keyboard_case = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    key_NOM = types.KeyboardButton('Именительный')
    key_GEN = types.KeyboardButton('Родительный')
    key_ACC = types.KeyboardButton('Винительный')
    key_DAT = types.KeyboardButton('Дательный')
    key_INS = types.KeyboardButton('Творительный')
    key_PREP = types.KeyboardButton('Предложный')
    keyboard_case.row(key_NOM, key_GEN, key_ACC, key_DAT, key_INS, key_PREP)
    bot.send_message(message.from_user.id,'Падеж', reply_markup=keyboard_case)
    
    if pos == 'Существительное' or pos == 'Прилагательное' or pos == 'Причастие':
        bot.register_next_step_handler(message, get_number)
    elif pos == 'Местоимение':
        if (word_initial.lower() in ['сколько', 'кто', 'что', 'несколько', 'нисколько', 'никто', 'ничто', 'столько', 'некто', 'нечто']) or (pronoun_type == 'Возвратный'):
            bot.register_next_step_handler(message, ready)
        else:
            bot.register_next_step_handler(message, get_number)

def get_number(message):
    global grammar_info
    global case
    global tense
    if pos == 'Существительное' or (pos == 'Прилагательное' and form != 'Краткая') or (pos == 'Причастие' and form != 'Краткая') or (pos == 'Местоимение' and word_initial.lower() not in ['каков','таков']):
        case = message.text 
        grammar_info += '\n' + case
    elif pos == 'Глагол' and modul == 'Изъявительное':
        tense = message.text
        grammar_info += '\n' + tense

    keyboard_number = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    key_SG = types.KeyboardButton('Единственное')
    key_PL = types.KeyboardButton('Множественное')
    keyboard_number.row(key_SG, key_PL)
    bot.send_message(message.from_user.id, 'Число', reply_markup = keyboard_number)
    
    if pos == 'Существительное':
        bot.register_next_step_handler(message, ready)
    elif pos == 'Прилагательное' or pos == 'Причастие':
        bot.register_next_step_handler(message, get_gender)
    elif pos == 'Местоимение' and pronoun_type == 'Личный':
        bot.register_next_step_handler(message, get_person)
    elif pos == 'Местоимение' and pronoun_type in ['Притяжательный','Относительный/вопросительный','Отрицательный','Указательный','Определительный']:
            bot.register_next_step_handler(message, get_gender)
    elif pos == 'Глагол':
        if modul == 'Повелительное':            
            bot.register_next_step_handler(message, ready)
        elif modul == 'Изъявительное' and tense == 'Прошедшее':
            bot.register_next_step_handler(message, get_gender)
        elif modul == 'Изъявительное' and (tense == 'Настоящее' or tense == 'Будущее'):
            bot.register_next_step_handler(message, get_person)

            
def get_tense(message):
    global modul 
    global voice 
    global grammar_info
    if pos == 'Глагол':
        modul = message.text
        grammar_info += '\n' + modul
    elif pos == 'Причастие':
        voice = message.text
        grammar_info += '\n' + voice
    
    if (pos == 'Глагол' and modul == 'Изъявительное') or pos == 'Причастие' or pos == 'Деепричастие':
            keyboard_tense = types.ReplyKeyboardMarkup(one_time_keyboard=True)
            key_past = types.KeyboardButton('Прошедшее')
            key_pres = types.KeyboardButton('Настоящее')
            key_fut = types.KeyboardButton('Будущее')
            keyboard_tense.row(key_past, key_pres, key_fut)
            bot.send_message(message.from_user.id, 'Время', reply_markup = keyboard_tense)
    

    if pos == 'Глагол':
            bot.register_next_step_handler(message, get_number)
    elif pos == 'Причастие':
        bot.register_next_step_handler(message, get_case)
    elif pos == 'Деепричастие':
        bot.register_next_step_handler(message, ready)
           
            
def get_gender(message):
    global number 
    global person
    global grammar_info
    
    if pos == 'Глагол':
        number = message.text
        grammar_info += '\n' + number
        if tense == 'Прошедшее' and number != 'Единственное':
            bot.register_next_step_handler(message, ready) 

            
    elif pos == 'Прилагательное' or pos == 'Причастие':
        number = message.text
        grammar_info += '\n' + number
        if number == 'Множественное':
            bot.register_next_step_handler(message, ready) 

    elif pos == 'Местоимение':
        if pronoun_type == 'Личный':
            person = message.text
            grammar_info += '\n' + person
            if person == '1л' or person == '2л' or (person == '3л' and number != 'Единственное'):
                bot.register_next_step_handler(message, ready)
                
        elif pronoun_type != 'Личный': 
            if number != 'Единственное':
                bot.register_next_step_handler(message, ready) 
                
    keyboard_gender = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    key_f = types.KeyboardButton('Женский')
    key_n = types.KeyboardButton('Средний')
    key_m = types.KeyboardButton('Мужской')
    keyboard_gender.row(key_f, key_n, key_m)
    bot.send_message(message.from_user.id, 'Род', reply_markup = keyboard_gender)
    bot.register_next_step_handler(message, ready)

def get_person(message):
    global number 
    global grammar_info
    
    if pos == 'Местоимение' or pos == 'Глагол':
        number == message.text
        grammar_info += '\n' + number
    
    keyboard_person = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    key_1 = types.KeyboardButton('1л')
    key_2 = types.KeyboardButton('2л')
    key_3 = types.KeyboardButton('3л')
    keyboard_person.row(key_1, key_2, key_3)
    bot.send_message(message.from_user.id, 'Лицо', reply_markup = keyboard_person)
    
    if pos == 'Глагол':
        bot.register_next_step_handler(message, ready)
    elif pos == 'Местоимение':
        bot.register_next_step_handler(message, get_gender)
         
def ready(message):
    global number 
    global gender 
    global person 
    global comparison 
    global tense 
    global case 
    global grammar_info
    
    if pos == 'Существительное':
        number = message.text
        grammar_info += '\n' + number
        
    elif pos == 'Глагол':
        if modul == 'Повелительное':
            number = message.text
            grammar_info += '\n' + number
        elif modul == 'Изъявительное':
            if tense == 'Прошедшее' and number == 'Единственное':
                gender = message.text
                grammar_info += '\n' + gender
            elif tense == 'Будущее' or tense == 'Настоящее':
                person = message.text
                grammar_info += '\n' + person
                
    elif pos == 'Наречие':
        comparison = message.text
        grammar_info += '\n' + comparison
        
    elif pos == 'Прилагательное': 
        if comparison == 'Положительная':
            gender = message.text
            grammar_info += '\n' + gender
    
    elif pos == 'Причастие':
        gender = message.text
        grammar_info += '\n' + gender
        
    elif pos == 'Местоимение':
        if pronoun_type == 'Возвратный' or word_initial.lower() in ['сколько', 'кто', 'что', 'несколько', 'нисколько', 'никто', 'ничто', 'столько', 'некто', 'нечто']:
            case = message.text
            grammar_info += '\n' + case
        elif (pronoun_type == 'Личный' and person == '3л' and number == 'Единственное') or (pronoun_type!='Личный' and number == 'Единственное'):
            gender = message.text
            grammar_info += '\n' + gender
            
    elif pos == 'Деепричастие':
        tense = message.text  
        grammar_info += '\n' + tense

    bot.send_message(message.from_user.id, f'Информация о слове: {grammar_info}.')
    keyboard_check = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    key_yes = types.KeyboardButton('Да')
    key_no = types.KeyboardButton('Нет')
    keyboard_check.row(key_yes, key_no)
    bot.send_message(message.from_user.id, 'Все верно?', reply_markup = keyboard_check)
    bot.register_next_step_handler(message, glosses)  

    
def glosses(message):
    global word_initial
    global grammar_info
    if message.text == 'Нет':
        bot.register_next_step_handler(message, get_pos)  
        
    dict_glosses = {
        'Падеж' : {
             'Именительный':'NOM',
             'Родительный':'GEN',
             'Творительный':'INS', 
             'Винительный' : 'ACC', 
             'Дательный' : 'DAT', 
             'Предложный': 'PREP'}, 
        'Время' : {
            'Прошедшее':'PST',
            'Настоящее' : 'PRS', 
            'Будущее':'PRF'}, 
        'Род' : {
            'Женский':'F', 
            'Мужской':'M', 
            'Средний':'N'}, 
        'Число' : {
            'Единственное':'SG', 
            'Множественное':'PL'}, 
        'Наклонение' : {
            'Изъявительное':'IND',
            'Повелительное':'IMP', 
            'Условное':'COND'}, 
        'Лицо' : {
            '1л':'1', 
            '2л':'2', 
            '3л':'3'},
        'Залог': {
            'Активный' : '',
            'Пассивный' : 'PASS'},
        'Степень сравнения' : {
            'Положительная' : '',
            'Сравнительная' : 'COMP',
            'Превосходная' : 'SUPERL'}
    }
    
    if pos == 'Существительное':
        case_fin = dict_glosses['Падеж'][case]
        number_fin = dict_glosses['Число'][number]
        if case == "Именительный":
            bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{number_fin}')
        else:
            bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{case_fin}.{number_fin}')

    elif pos == 'Глагол':
        if modul == 'Повелительное':
            number_fin = dict_glosses['Число'][number]
            bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}.{number_fin}')
        elif modul == 'Изъявительное':
            if tense == "Прошедшее":
                if number == 'Единственное':
                    tense_fin = dict_glosses['Время'][tense]
                    gender_fin = dict_glosses['Род'][gender]
                    bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{tense_fin}-{gender_fin}')
                else:
                    tense_fin = dict_glosses['Время'][tense]
                    number_fin = dict_glosses['Число'][number]
                    bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{tense_fin}-{number_fin}')
            elif tense == 'Настоящее' or tense == 'Будущее':
                tense_fin = dict_glosses['Время'][tense]
                number_fin = dict_glosses['Число'][number]
                person_fin = dict_glosses['Лицо'][person]
                bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{tense_fin}.{person_fin}{number_fin}')
        elif modul == 'Условное':
            bot.send_message(message.from_user.id, f'Прости, дорогой пользователь, я пока не научился обрабатывать такие вещи - всё впереди!')
    
    elif pos == 'Местоимение':
        if pronoun_type == 'Личный':
            case_fin = dict_glosses['Падеж'][case]
            number_fin = dict_glosses['Число'][number]
            person_fin = dict_glosses['Лицо'][person]
            if case == 'Именительный':
                if number == 'Единственное' and person == '3л':
                    gender_fin = dict_glosses['Род'][gender]
                    bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}{person_fin}{number_fin}.{gender_fin}')
                else:
                    bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}{person_fin}{number_fin}')
            else:
                if number == 'Единственное' and person == '3л':
                    gender_fin = dict_glosses['Род'][gender]
                    bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}{person_fin}{number_fin}.{gender_fin}.{case_fin}')
                else:
                    bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}{person_fin}{number_fin}.{case_fin}')
        
        elif pronoun_type == 'Возвратный':
            case_fin = dict_glosses['Падеж'][case]
            bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{case_fin}')
        
        else:
            word_initial = word_initial.replace('-', '.')
            case_fin = dict_glosses['Падеж'][case]
            if word_initial.lower() == 'некто':
                bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}')
            elif word_initial.lower() in ['кто','что', 'никто', 'ничто', 'некого','нечего' 'сколько','нечто','несколько', 'кто.либо','кто.нибудь','сколько.то','сколько.нибудь','кое.кто','кое.что']:
                if case == 'Именительный':
                    bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}')
                else:
                    bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{case_fin}')
        
            else:
                number_fin = dict_glosses['Число'][number]
                gender_fin = dict_glosses['Род'][gender]
                if number == 'Единственное':
                    if case == 'Именительный':
                        bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{gender_fin}')
                    else:
                        if word_initial.lower() in ['каков','таков']:
                            bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{gender_fin}')
                        else:
                            bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{case_fin}.{gender_fin}')
                else:
                    if case == 'Именительный':
                        bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{number_fin}')
                    else:
                        if word_initial.lower() in ['каков','таков']:
                            bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{number_fin}')
                        else:
                            bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{case_fin}.{number_fin}')
        
    elif pos == 'Прилагательное':
        if comparison != 'Положительная':
            comp_fin = dict_glosses['Степень сравнения'][comparison]
            bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{comp_fin}')
        
        gender_fin = dict_glosses['Род'][gender]
        number_fin = dict_glosses['Число'][number]
        if form == 'Краткая':
            if number == 'Единственное':
                bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{gender_fin}')
            else:
                bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{number_fin}')
        case_fin = dict_glosses['Падеж'][case]
        if number == 'Единственное':
            if case == 'Именительный':
                bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{gender_fin}')
            else:
                bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{case_fin}.{gender_fin}')
        else:
            if case == 'Именительный':
                bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{number_fin}')   
            else:
                bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{case_fin}.{number_fin}')               
    
    elif pos == 'Причастие':
        voice_fin = dict_glosses['Залог'][voice]
        tense_fin = dict_glosses['Время'][tense]
        number_fin = dict_glosses['Число'][number]
        gender_fin = dict_glosses['Род'][gender]
        if form == 'Краткая':
            if number == 'Единственное':
                bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{tense_fin}.{voice_fin}-{gender_fin}')
            else:
                bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{tense_fin}.{voice_fin}-{number_fin}')
        else:
            case_fin = dict_glosses['Падеж'][case]
            if number == 'Единственное':
                if case == 'Именительный':
                    bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{tense_fin}.{voice_fin}-{gender_fin}')
                else:
                    bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{tense_fin}.{voice_fin}-{case_fin}.{gender_fin}')
            else:
                if case == 'Именительный':
                    bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{tense_fin}.{voice_fin}-{number_fin}')               
                else:
                    bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{tense_fin}.{voice_fin}-{case_fin}.{number_fin}')               
    
    elif pos == 'Деепричастие':
        tense_fin = dict_glosses['Время'][tense]
        bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{tense_fin}')
    
    elif pos == 'Наречие':
        comp_fin = dict_glosses['Степень сравнения'][comparison]
        bot.send_message(message.from_user.id, f'{word}\n{word_initial.lower()}-{comp_fin}')

    bot.register_next_step_handler(message, get_word)  
    
bot.polling(none_stop=True, interval=0)
